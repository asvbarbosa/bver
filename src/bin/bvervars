#!/usr/bin/env python

import sys
import argparse
import bver
import os

def outputVars(paths, separator):
    """
    Output the parsed bver var names followed by the version in the stream.
    """
    bverLoader = bver.Loader.JsonLoader()
    bverLoader.addFromJsonPaths(paths)

    # outputting result to the stream
    for software in bverLoader.softwares():
        sys.stdout.write(
            '{key}{separator}{value}\n'.format(
                key=software.bverName(),
                separator=separator,
                value=software.version()
            )
        )

        # addon environment variables
        for addonName in software.addonNames():
            addon = software.addon(addonName)

            # in case the addon is disabled lets add
            # an environment variable to control that
            addonEnabledEnv = addon.bverEnabledName(software)
            if str(int(addon.option('enabled'))) != os.environ.get(addonEnabledEnv, '1'):
                sys.stdout.write(
                    '{key}{separator}{value}\n'.format(
                        key=addonEnabledEnv,
                        separator=separator,
                        value=int(addon.option('enabled'))
                    )
                )

            sys.stdout.write(
                '{key}{separator}{value}\n'.format(
                    key=software.bverName(addon),
                    separator=separator,
                    value=addon.version()
                )
            )



# command help
parser = argparse.ArgumentParser(
    description='Outputs the bver variables followed by their versions'
)

parser.add_argument(
    'paths',
    metavar='P',
    nargs='+',
    help='a list of paths (json files or/and directories containing json files). It is loaded in the order passed to this argument'
)

parser.add_argument(
    '--separator',
    metavar='s',
    default='=',
    type=str,
    help='separator to be used between the key and value (default: "=")'
)

if __name__ == "__main__":
    args = parser.parse_args()
    outputVars(args.paths, args.separator)
